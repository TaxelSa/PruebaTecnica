@page "/"
@using Microsoft.EntityFrameworkCore;
@using PruebaTec.Models
@inject PruebaTecContext _context
@rendermode InteractiveServer


<h3 class="text-xl font-bold mb-4">Lista de Estudiantes</h3>

@if (mostrarMensaje)
{
    <div class="alert alert-success">@mensajeEliminacion</div>
}

@if (isLoading)
{
    <p>Cargando estudiantes...</p>
}
else if (pagedEstudiantes is null)
{
    <p class="text-danger">Error al cargar los estudiantes.</p>
}
else if (pagedEstudiantes is not null && pagedEstudiantes.Any())
{
    <table class="table table-bordered table-striped w-full">
        <thead class="bg-gray-100">
            <tr>
                <th>ID</th>
                <th>Nombre Completo</th>
                <th>CURP</th>
                <th>Correo</th>
                <th>Teléfono</th>
                <th>Sexo</th>
                <th>Modalidad</th>
                <th>Es Becado</th>
                <th>Carrera</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in pagedEstudiantes)
            {
                <tr Key="@e.Id">
                    <td>@e.Id</td>
                    <td>@e.Nombres @e.Apellidos</td>
                    <td>@e.CURP</td>
                    <td>@e.Email</td>
                    <td>@e.Telefono</td>
                    <td>@e.Sexo</td>
                    <td>@e.Modalidad</td>
                    <td>@(e.EsBecado ? "Sí" : "No")</td>
                    <td>@e.Carrera?.NombreCarrera</td>
                    <td>
                        <a class="btn btn-primary" href="@($"/estudiante/{e.Id}")">Ver detalles</a>
                        <button class="btn btn-sm btn-danger" @onclick="() => EliminarEstudiante(e.Id)">Eliminar</button>

                    </td>
                    
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-center align-items-center gap-3 mt-4">
        <button class="btn btn-secondary" @onclick="AnteriorPagina" disabled="@(!PuedeRetroceder)">
            <i class="oi oi-arrow-thick-left"></i> Anterior
        </button>
        <span class="mx-2">Página @paginaActual de @paginasTotales</span>
        <button class="btn btn-secondary" @onclick="SiguientePagina" disabled="@(!PuedeAvanzar)">
            Siguiente <i class="oi oi-arrow-thick-right"></i>
        </button>
    </div>

} 
else
{
    <p>No hay estudiantes registrados.</p>
}

@code {
    private List<Estudiante>? pagedEstudiantes;
    private bool isLoading = true;
    private int paginaActual = 1;
    private const int tamañoPagina = 20;
    private int totalEstudiantes = 0;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        isLoading = true;
        try
        {
            // Obtener el total de estudiantes
            totalEstudiantes = await _context.Estudiantes.CountAsync();
            
            // Obtener solo los estudiantes de la página actual
            pagedEstudiantes = await _context.Estudiantes
                .Include(e => e.Carrera)
                .OrderBy(e => e.Id)
                .Skip((paginaActual - 1) * tamañoPagina)
                .Take(tamañoPagina)
                .ToListAsync();
                
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar estudiantes: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private int paginasTotales => (int)Math.Ceiling((double)totalEstudiantes / tamañoPagina);
    private bool PuedeAvanzar => paginaActual < paginasTotales;
    private bool PuedeRetroceder => paginaActual > 1;

    private async Task SiguientePagina()
    {
        if (PuedeAvanzar)
        {
            paginaActual++;
            await CargarDatos();
        }
    }

    private async Task AnteriorPagina()
    {
        if (PuedeRetroceder)
        {
            paginaActual--;
            await CargarDatos();
        }
    }

    private void VerDetalles(int id)
    {
        NavigationManager.NavigateTo($"/estudiante/{id}");
    }

private string? mensajeEliminacion;
private bool mostrarMensaje = false;

private async Task EliminarEstudiante(int id)
{
    var estudiante = await _context.Estudiantes.FindAsync(id);

    if (estudiante is null)
    {
        mensajeEliminacion = $"Estudiante con ID {id} no encontrado.";
        mostrarMensaje = true;
        return;
    }

    try
    {
        _context.Estudiantes.Remove(estudiante);
        await _context.SaveChangesAsync();

        // Vuelve a cargar los datos paginados
        await CargarDatos();

        mensajeEliminacion = $"Estudiante '{estudiante.Nombres} {estudiante.Apellidos}' eliminado exitosamente.";
        mostrarMensaje = true;

        var _ = Task.Run(async () =>
        {
            await Task.Delay(2000);
            mostrarMensaje = false;
            await InvokeAsync(StateHasChanged);
        });
    }
    catch (Exception ex)
    {
        mensajeEliminacion = $"Error al eliminar: {ex.Message}";
        mostrarMensaje = true;
    }
}


}

